schema {
  query: Query
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

type Beneficiary {
  id: Bytes!
  totalClaimed: BigInt!
  dateAdded: BigInt!
  dateRemoved: BigInt
  isActive: Boolean!
}

input Beneficiary_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  totalClaimed: BigInt
  totalClaimed_not: BigInt
  totalClaimed_gt: BigInt
  totalClaimed_lt: BigInt
  totalClaimed_gte: BigInt
  totalClaimed_lte: BigInt
  totalClaimed_in: [BigInt!]
  totalClaimed_not_in: [BigInt!]
  dateAdded: BigInt
  dateAdded_not: BigInt
  dateAdded_gt: BigInt
  dateAdded_lt: BigInt
  dateAdded_gte: BigInt
  dateAdded_lte: BigInt
  dateAdded_in: [BigInt!]
  dateAdded_not_in: [BigInt!]
  dateRemoved: BigInt
  dateRemoved_not: BigInt
  dateRemoved_gt: BigInt
  dateRemoved_lt: BigInt
  dateRemoved_gte: BigInt
  dateRemoved_lte: BigInt
  dateRemoved_in: [BigInt!]
  dateRemoved_not_in: [BigInt!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Beneficiary_filter]
  or: [Beneficiary_filter]
}

enum Beneficiary_orderBy {
  id
  totalClaimed
  dateAdded
  dateRemoved
  isActive
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Funds {
  id: Bytes!
  totalSupplied: BigInt!
  totalWithdrawn: BigInt!
  totalClaimed: BigInt!
  contractBalance: BigInt!
}

input Funds_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  totalSupplied: BigInt
  totalSupplied_not: BigInt
  totalSupplied_gt: BigInt
  totalSupplied_lt: BigInt
  totalSupplied_gte: BigInt
  totalSupplied_lte: BigInt
  totalSupplied_in: [BigInt!]
  totalSupplied_not_in: [BigInt!]
  totalWithdrawn: BigInt
  totalWithdrawn_not: BigInt
  totalWithdrawn_gt: BigInt
  totalWithdrawn_lt: BigInt
  totalWithdrawn_gte: BigInt
  totalWithdrawn_lte: BigInt
  totalWithdrawn_in: [BigInt!]
  totalWithdrawn_not_in: [BigInt!]
  totalClaimed: BigInt
  totalClaimed_not: BigInt
  totalClaimed_gt: BigInt
  totalClaimed_lt: BigInt
  totalClaimed_gte: BigInt
  totalClaimed_lte: BigInt
  totalClaimed_in: [BigInt!]
  totalClaimed_not_in: [BigInt!]
  contractBalance: BigInt
  contractBalance_not: BigInt
  contractBalance_gt: BigInt
  contractBalance_lt: BigInt
  contractBalance_gte: BigInt
  contractBalance_lte: BigInt
  contractBalance_in: [BigInt!]
  contractBalance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Funds_filter]
  or: [Funds_filter]
}

enum Funds_orderBy {
  id
  totalSupplied
  totalWithdrawn
  totalClaimed
  contractBalance
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  beneficiary(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Beneficiary
  beneficiaries(
    skip: Int = 0
    first: Int = 100
    orderBy: Beneficiary_orderBy
    orderDirection: OrderDirection
    where: Beneficiary_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Beneficiary!]!
  funds(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Funds
  funds_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: Funds_orderBy
    orderDirection: OrderDirection
    where: Funds_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Funds!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}