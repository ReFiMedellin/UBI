// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract SubsidyProgram {
  address public immutable owner;
  address[] public beneficiaries;
  uint256 public subsidyClaimInterval = 7 days;
  uint256 public subsidyClaimableAmount;
  IERC20 public token;

  mapping (address => uint256) public addressToLastTimeClaimed;

  constructor(address _tokenAddress) {
    token = IERC20(_tokenAddress);
    owner = msg.sender;
  }

  function setClaimInterval(uint256 _interval) public onlyOwner {
    subsidyClaimInterval = _interval;
  }

  function setClaimableAmount(uint256 _amount) public onlyOwner {
    subsidyClaimableAmount = _amount;
  }

  function addFunds(uint256 _amount) public {
    require(token.transferFrom(msg.sender, address(this), _amount), "Transfer failed.");
  }

  function withdrawFunds() public onlyOwner {
    require(token.transfer(msg.sender, token.balanceOf(address(this))), "Transfer failed.");
  }

  function addBeneficiary(address _userAddress) public onlyOwner {
    (bool _isBeneficiary,) = isBeneficiary(_userAddress);
    require(!_isBeneficiary, "Already a beneficiary.");
    require(_userAddress != address(0), "Invalid address");
    beneficiaries.push(_userAddress);
    addressToLastTimeClaimed[_userAddress] = block.timestamp - subsidyClaimInterval;
  }

  function removeBeneficiary(address _userAddress) public onlyOwner {
    (bool isBeneficiary_, uint256 index) = isBeneficiary(_userAddress);
    require(isBeneficiary_, "Address is not a beneficiary.");
    beneficiaries[index] = beneficiaries[beneficiaries.length - 1];
    beneficiaries.pop();
    addressToLastTimeClaimed[_userAddress] = 0;
  }

  function claimSubsidy() public {
    (bool isBeneficiary_,) = isBeneficiary(msg.sender);
    require(isBeneficiary_, "Address is not a beneficiary.");
    require(block.timestamp - addressToLastTimeClaimed[msg.sender] >= subsidyClaimInterval, "Cannot claim yet.");

    addressToLastTimeClaimed[msg.sender] = block.timestamp;
    require(token.transfer(msg.sender, subsidyClaimableAmount), "Not enough funds.");
  }

  function isBeneficiary(address _beneficiaryAddress) public view returns(bool,uint256) {
    bool isBeneficiary_ = false;
    for (uint256 i = 0; i < beneficiaries.length; i++) {
      isBeneficiary_ = beneficiaries[i] == _beneficiaryAddress;

      if (isBeneficiary_) {
        return (isBeneficiary_, i);
      }
    }

    return (isBeneficiary_, 0);
  }

  modifier onlyOwner() {
    require(msg.sender == owner, "Only owner can access this function.");
    _;
  }
}
